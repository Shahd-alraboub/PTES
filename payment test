<?php

use PHPUnit\Framework\TestCase;

require_once 'src/Payment.php'; // افترض أن الكلاس Payment في هذا المسار

class PaymentTest extends TestCase
{
    private $dbMock;
    private $payment;

    protected function setUp(): void
    {
        // إنشاء محاكاة لقاعدة البيانات باستخدام PDO
        $this->dbMock = $this->createMock(mysqli::class);
        
        // تمرير الاتصال المحاكي إلى كلاس Payment
        $this->payment = new Payment($this->dbMock);
    }

    public function testSetPaymentDetails()
    {
        $this->payment->setPaymentDetails(1, 200.0, 'Sadad');
        
        // التحقق من تعيين البيانات بشكل صحيح
        $this->assertSame(1, $this->getPrivateProperty($this->payment, 'ticketID'));
        $this->assertSame(200.0, $this->getPrivateProperty($this->payment, 'amount'));
        $this->assertSame('Sadad', $this->getPrivateProperty($this->payment, 'paymentType'));
    }

    public function testProcessPayment()
    {
        // إعداد محاكاة إدخال البيانات
        $stmtMock = $this->createMock(mysqli_stmt::class);
        $stmtMock->expects($this->once())
            ->method('bind_param')
            ->with("sids", $this->isType('string'), $this->isType('int'), $this->isType('float'), $this->isType('string'));
        $stmtMock->expects($this->once())
            ->method('execute')
            ->willReturn(true);
        $stmtMock->method('insert_id')->willReturn(1);

        $this->dbMock->expects($this->once())
            ->method('prepare')
            ->willReturn($stmtMock);

        // إعداد تفاصيل الدفع
        $this->payment->setPaymentDetails(1, 200.0, 'Sadad');
        
        // التحقق من نجاح العملية
        $this->assertTrue($this->payment->processPayment());
    }

    public function testRefundPayment()
    {
        // إعداد محاكاة النتائج
        $stmtMock = $this->createMock(mysqli_stmt::class);
        $stmtMock->expects($this->any())
            ->method('execute')
            ->willReturn(true);

        $resultMock = $this->createMock(mysqli_result::class);
        $resultMock->method('num_rows')->willReturn(1);
        $resultMock->method('fetch_assoc')->willReturn(['ticketID' => 1]);

        $this->dbMock->expects($this->exactly(2))
            ->method('prepare')
            ->willReturn($stmtMock);
        $stmtMock->expects($this->any())
            ->method('get_result')
            ->willReturn($resultMock);

        // التحقق من نجاح الاسترداد
        $this->assertTrue($this->payment->refundPayment(1));
    }

    public function testGeneratePaymentReceipt()
    {
        // إعداد بيانات محاكاة الدفع
        $paymentDetails = [
            'paymentID' => 1,
            'paymentDate' => '2024-11-26',
            'amount' => 200.0,
            'paymentType' => 'Sadad',
            'eventTitle' => 'Concert',
            'seatNumber' => 'A1'
        ];

        $this->payment = $this->getMockBuilder(Payment::class)
            ->setConstructorArgs([$this->dbMock])
            ->onlyMethods(['getPaymentDetails'])
            ->getMock();

        $this->payment->expects($this->once())
            ->method('getPaymentDetails')
            ->with(1)
            ->willReturn($paymentDetails);

        // التحقق من الإيصال
        $receipt = $this->payment->generatePaymentReceipt(1);

        $expectedReceipt = <<<RECEIPT
=== إيصال الدفع ===
رقم الدفع: 1
تاريخ الدفع: 2024-11-26
المبلغ: 200 ريال
طريقة الدفع: Sadad
الفعالية: Concert
رقم المقعد: A1
==================

RECEIPT;

        $this->assertSame($expectedReceipt, $receipt);
    }

    // مساعدة لاستخراج خاصية خاصة من الكائن
    private function getPrivateProperty($object, $property)
    {
        $reflection = new ReflectionClass($object);
        $prop = $reflection->getProperty($property);
        $prop->setAccessible(true);
        return $prop->getValue($object);
    }
}

